//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Condenser {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetMain")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetMain : global::System.Data.DataSet {
        
        private InsulatingLiquidTypesDataTable tableInsulatingLiquidTypes;
        
        private CondenserTypesDataTable tableCondenserTypes;
        
        private CondensersDataTable tableCondensers;
        
        private global::System.Data.DataRelation relationFK_Condensers_0;
        
        private global::System.Data.DataRelation relationFK_Condensers_1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DataSetMain() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected DataSetMain(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["InsulatingLiquidTypes"] != null)) {
                    base.Tables.Add(new InsulatingLiquidTypesDataTable(ds.Tables["InsulatingLiquidTypes"]));
                }
                if ((ds.Tables["CondenserTypes"] != null)) {
                    base.Tables.Add(new CondenserTypesDataTable(ds.Tables["CondenserTypes"]));
                }
                if ((ds.Tables["Condensers"] != null)) {
                    base.Tables.Add(new CondensersDataTable(ds.Tables["Condensers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InsulatingLiquidTypesDataTable InsulatingLiquidTypes {
            get {
                return this.tableInsulatingLiquidTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CondenserTypesDataTable CondenserTypes {
            get {
                return this.tableCondenserTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CondensersDataTable Condensers {
            get {
                return this.tableCondensers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSetMain cln = ((DataSetMain)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["InsulatingLiquidTypes"] != null)) {
                    base.Tables.Add(new InsulatingLiquidTypesDataTable(ds.Tables["InsulatingLiquidTypes"]));
                }
                if ((ds.Tables["CondenserTypes"] != null)) {
                    base.Tables.Add(new CondenserTypesDataTable(ds.Tables["CondenserTypes"]));
                }
                if ((ds.Tables["Condensers"] != null)) {
                    base.Tables.Add(new CondensersDataTable(ds.Tables["Condensers"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableInsulatingLiquidTypes = ((InsulatingLiquidTypesDataTable)(base.Tables["InsulatingLiquidTypes"]));
            if ((initTable == true)) {
                if ((this.tableInsulatingLiquidTypes != null)) {
                    this.tableInsulatingLiquidTypes.InitVars();
                }
            }
            this.tableCondenserTypes = ((CondenserTypesDataTable)(base.Tables["CondenserTypes"]));
            if ((initTable == true)) {
                if ((this.tableCondenserTypes != null)) {
                    this.tableCondenserTypes.InitVars();
                }
            }
            this.tableCondensers = ((CondensersDataTable)(base.Tables["Condensers"]));
            if ((initTable == true)) {
                if ((this.tableCondensers != null)) {
                    this.tableCondensers.InitVars();
                }
            }
            this.relationFK_Condensers_0 = this.Relations["FK_Condensers_0"];
            this.relationFK_Condensers_1 = this.Relations["FK_Condensers_1"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSetMain";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetMain.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInsulatingLiquidTypes = new InsulatingLiquidTypesDataTable();
            base.Tables.Add(this.tableInsulatingLiquidTypes);
            this.tableCondenserTypes = new CondenserTypesDataTable();
            base.Tables.Add(this.tableCondenserTypes);
            this.tableCondensers = new CondensersDataTable();
            base.Tables.Add(this.tableCondensers);
            this.relationFK_Condensers_0 = new global::System.Data.DataRelation("FK_Condensers_0", new global::System.Data.DataColumn[] {
                        this.tableInsulatingLiquidTypes.InsulatingLiquidTypeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCondensers.InsulatingLiquidTypeIDColumn}, false);
            this.Relations.Add(this.relationFK_Condensers_0);
            this.relationFK_Condensers_1 = new global::System.Data.DataRelation("FK_Condensers_1", new global::System.Data.DataColumn[] {
                        this.tableCondenserTypes.CondenserTypeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCondensers.CondenserTypeIDColumn}, false);
            this.Relations.Add(this.relationFK_Condensers_1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeInsulatingLiquidTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCondenserTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCondensers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetMain ds = new DataSetMain();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void InsulatingLiquidTypesRowChangeEventHandler(object sender, InsulatingLiquidTypesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CondenserTypesRowChangeEventHandler(object sender, CondenserTypesRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CondensersRowChangeEventHandler(object sender, CondensersRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InsulatingLiquidTypesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInsulatingLiquidTypeID;
            
            private global::System.Data.DataColumn columnInsulatingLiquidTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InsulatingLiquidTypesDataTable() {
                this.TableName = "InsulatingLiquidTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InsulatingLiquidTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected InsulatingLiquidTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InsulatingLiquidTypeIDColumn {
                get {
                    return this.columnInsulatingLiquidTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InsulatingLiquidTypeNameColumn {
                get {
                    return this.columnInsulatingLiquidTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InsulatingLiquidTypesRow this[int index] {
                get {
                    return ((InsulatingLiquidTypesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InsulatingLiquidTypesRowChangeEventHandler InsulatingLiquidTypesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InsulatingLiquidTypesRowChangeEventHandler InsulatingLiquidTypesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InsulatingLiquidTypesRowChangeEventHandler InsulatingLiquidTypesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event InsulatingLiquidTypesRowChangeEventHandler InsulatingLiquidTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddInsulatingLiquidTypesRow(InsulatingLiquidTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InsulatingLiquidTypesRow AddInsulatingLiquidTypesRow(string InsulatingLiquidTypeName) {
                InsulatingLiquidTypesRow rowInsulatingLiquidTypesRow = ((InsulatingLiquidTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        InsulatingLiquidTypeName};
                rowInsulatingLiquidTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInsulatingLiquidTypesRow);
                return rowInsulatingLiquidTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InsulatingLiquidTypesRow FindByInsulatingLiquidTypeID(long InsulatingLiquidTypeID) {
                return ((InsulatingLiquidTypesRow)(this.Rows.Find(new object[] {
                            InsulatingLiquidTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                InsulatingLiquidTypesDataTable cln = ((InsulatingLiquidTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InsulatingLiquidTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnInsulatingLiquidTypeID = base.Columns["InsulatingLiquidTypeID"];
                this.columnInsulatingLiquidTypeName = base.Columns["InsulatingLiquidTypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnInsulatingLiquidTypeID = new global::System.Data.DataColumn("InsulatingLiquidTypeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsulatingLiquidTypeID);
                this.columnInsulatingLiquidTypeName = new global::System.Data.DataColumn("InsulatingLiquidTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsulatingLiquidTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnInsulatingLiquidTypeID}, true));
                this.columnInsulatingLiquidTypeID.AutoIncrement = true;
                this.columnInsulatingLiquidTypeID.AutoIncrementSeed = -1;
                this.columnInsulatingLiquidTypeID.AutoIncrementStep = -1;
                this.columnInsulatingLiquidTypeID.AllowDBNull = false;
                this.columnInsulatingLiquidTypeID.Unique = true;
                this.columnInsulatingLiquidTypeName.AllowDBNull = false;
                this.columnInsulatingLiquidTypeName.MaxLength = 256;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InsulatingLiquidTypesRow NewInsulatingLiquidTypesRow() {
                return ((InsulatingLiquidTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InsulatingLiquidTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(InsulatingLiquidTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InsulatingLiquidTypesRowChanged != null)) {
                    this.InsulatingLiquidTypesRowChanged(this, new InsulatingLiquidTypesRowChangeEvent(((InsulatingLiquidTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InsulatingLiquidTypesRowChanging != null)) {
                    this.InsulatingLiquidTypesRowChanging(this, new InsulatingLiquidTypesRowChangeEvent(((InsulatingLiquidTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InsulatingLiquidTypesRowDeleted != null)) {
                    this.InsulatingLiquidTypesRowDeleted(this, new InsulatingLiquidTypesRowChangeEvent(((InsulatingLiquidTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InsulatingLiquidTypesRowDeleting != null)) {
                    this.InsulatingLiquidTypesRowDeleting(this, new InsulatingLiquidTypesRowChangeEvent(((InsulatingLiquidTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveInsulatingLiquidTypesRow(InsulatingLiquidTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetMain ds = new DataSetMain();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InsulatingLiquidTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CondenserTypesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCondenserTypeID;
            
            private global::System.Data.DataColumn columnCondenserTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondenserTypesDataTable() {
                this.TableName = "CondenserTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CondenserTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CondenserTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CondenserTypeIDColumn {
                get {
                    return this.columnCondenserTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CondenserTypeNameColumn {
                get {
                    return this.columnCondenserTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondenserTypesRow this[int index] {
                get {
                    return ((CondenserTypesRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CondenserTypesRowChangeEventHandler CondenserTypesRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CondenserTypesRowChangeEventHandler CondenserTypesRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CondenserTypesRowChangeEventHandler CondenserTypesRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CondenserTypesRowChangeEventHandler CondenserTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCondenserTypesRow(CondenserTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondenserTypesRow AddCondenserTypesRow(string CondenserTypeName) {
                CondenserTypesRow rowCondenserTypesRow = ((CondenserTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CondenserTypeName};
                rowCondenserTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCondenserTypesRow);
                return rowCondenserTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondenserTypesRow FindByCondenserTypeID(long CondenserTypeID) {
                return ((CondenserTypesRow)(this.Rows.Find(new object[] {
                            CondenserTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                CondenserTypesDataTable cln = ((CondenserTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CondenserTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCondenserTypeID = base.Columns["CondenserTypeID"];
                this.columnCondenserTypeName = base.Columns["CondenserTypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCondenserTypeID = new global::System.Data.DataColumn("CondenserTypeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondenserTypeID);
                this.columnCondenserTypeName = new global::System.Data.DataColumn("CondenserTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondenserTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCondenserTypeID}, true));
                this.columnCondenserTypeID.AutoIncrement = true;
                this.columnCondenserTypeID.AutoIncrementSeed = -1;
                this.columnCondenserTypeID.AutoIncrementStep = -1;
                this.columnCondenserTypeID.AllowDBNull = false;
                this.columnCondenserTypeID.Unique = true;
                this.columnCondenserTypeName.AllowDBNull = false;
                this.columnCondenserTypeName.MaxLength = 256;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondenserTypesRow NewCondenserTypesRow() {
                return ((CondenserTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CondenserTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(CondenserTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CondenserTypesRowChanged != null)) {
                    this.CondenserTypesRowChanged(this, new CondenserTypesRowChangeEvent(((CondenserTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CondenserTypesRowChanging != null)) {
                    this.CondenserTypesRowChanging(this, new CondenserTypesRowChangeEvent(((CondenserTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CondenserTypesRowDeleted != null)) {
                    this.CondenserTypesRowDeleted(this, new CondenserTypesRowChangeEvent(((CondenserTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CondenserTypesRowDeleting != null)) {
                    this.CondenserTypesRowDeleting(this, new CondenserTypesRowChangeEvent(((CondenserTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCondenserTypesRow(CondenserTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetMain ds = new DataSetMain();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CondenserTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CondensersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCondenserID;
            
            private global::System.Data.DataColumn columnCondenserNumber;
            
            private global::System.Data.DataColumn columnCondenserTypeID;
            
            private global::System.Data.DataColumn columnNominalVoltage;
            
            private global::System.Data.DataColumn columnNominalCapacitance;
            
            private global::System.Data.DataColumn columnEnergyCharge;
            
            private global::System.Data.DataColumn columnInductivity;
            
            private global::System.Data.DataColumn columnNormalizedResource;
            
            private global::System.Data.DataColumn columnMaxDischargeCurrent;
            
            private global::System.Data.DataColumn columnCondenserWeight;
            
            private global::System.Data.DataColumn columnCondenserVolume;
            
            private global::System.Data.DataColumn columnInsulatingLiquidTypeID;
            
            private global::System.Data.DataColumn columnSolidInsulationType;
            
            private global::System.Data.DataColumn columnInsulationThickness;
            
            private global::System.Data.DataColumn columnCasingType;
            
            private global::System.Data.DataColumn columnCasingThickness;
            
            private global::System.Data.DataColumn columnDesignFeaturesSection;
            
            private global::System.Data.DataColumn columnInsulationResistance;
            
            private global::System.Data.DataColumn columnTangentAngle;
            
            private global::System.Data.DataColumn columnTemperatureKoeff;
            
            private global::System.Data.DataColumn columnTechnologicalFeatures;
            
            private global::System.Data.DataColumn columnCondenserImage;
            
            private global::System.Data.DataColumn columnSpecificCapacityByWeight;
            
            private global::System.Data.DataColumn columnSpecificEnergyByWeight;
            
            private global::System.Data.DataColumn columnSpecificEnergyByVolume;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondensersDataTable() {
                this.TableName = "Condensers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CondensersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CondensersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CondenserIDColumn {
                get {
                    return this.columnCondenserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CondenserNumberColumn {
                get {
                    return this.columnCondenserNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CondenserTypeIDColumn {
                get {
                    return this.columnCondenserTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NominalVoltageColumn {
                get {
                    return this.columnNominalVoltage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NominalCapacitanceColumn {
                get {
                    return this.columnNominalCapacitance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EnergyChargeColumn {
                get {
                    return this.columnEnergyCharge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InductivityColumn {
                get {
                    return this.columnInductivity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NormalizedResourceColumn {
                get {
                    return this.columnNormalizedResource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MaxDischargeCurrentColumn {
                get {
                    return this.columnMaxDischargeCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CondenserWeightColumn {
                get {
                    return this.columnCondenserWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CondenserVolumeColumn {
                get {
                    return this.columnCondenserVolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InsulatingLiquidTypeIDColumn {
                get {
                    return this.columnInsulatingLiquidTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SolidInsulationTypeColumn {
                get {
                    return this.columnSolidInsulationType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InsulationThicknessColumn {
                get {
                    return this.columnInsulationThickness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CasingTypeColumn {
                get {
                    return this.columnCasingType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CasingThicknessColumn {
                get {
                    return this.columnCasingThickness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DesignFeaturesSectionColumn {
                get {
                    return this.columnDesignFeaturesSection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InsulationResistanceColumn {
                get {
                    return this.columnInsulationResistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TangentAngleColumn {
                get {
                    return this.columnTangentAngle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TemperatureKoeffColumn {
                get {
                    return this.columnTemperatureKoeff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TechnologicalFeaturesColumn {
                get {
                    return this.columnTechnologicalFeatures;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CondenserImageColumn {
                get {
                    return this.columnCondenserImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SpecificCapacityByWeightColumn {
                get {
                    return this.columnSpecificCapacityByWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SpecificEnergyByWeightColumn {
                get {
                    return this.columnSpecificEnergyByWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SpecificEnergyByVolumeColumn {
                get {
                    return this.columnSpecificEnergyByVolume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondensersRow this[int index] {
                get {
                    return ((CondensersRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CondensersRowChangeEventHandler CondensersRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CondensersRowChangeEventHandler CondensersRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CondensersRowChangeEventHandler CondensersRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CondensersRowChangeEventHandler CondensersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCondensersRow(CondensersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondensersRow AddCondensersRow(
                        string CondenserNumber, 
                        CondenserTypesRow parentCondenserTypesRowByFK_Condensers_1, 
                        decimal NominalVoltage, 
                        decimal NominalCapacitance, 
                        decimal EnergyCharge, 
                        decimal Inductivity, 
                        long NormalizedResource, 
                        decimal MaxDischargeCurrent, 
                        decimal CondenserWeight, 
                        decimal CondenserVolume, 
                        InsulatingLiquidTypesRow parentInsulatingLiquidTypesRowByFK_Condensers_0, 
                        long SolidInsulationType, 
                        long InsulationThickness, 
                        long CasingType, 
                        long CasingThickness, 
                        string DesignFeaturesSection, 
                        decimal InsulationResistance, 
                        decimal TangentAngle, 
                        decimal TemperatureKoeff, 
                        string TechnologicalFeatures, 
                        byte[] CondenserImage, 
                        decimal SpecificCapacityByWeight, 
                        decimal SpecificEnergyByWeight, 
                        decimal SpecificEnergyByVolume) {
                CondensersRow rowCondensersRow = ((CondensersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CondenserNumber,
                        null,
                        NominalVoltage,
                        NominalCapacitance,
                        EnergyCharge,
                        Inductivity,
                        NormalizedResource,
                        MaxDischargeCurrent,
                        CondenserWeight,
                        CondenserVolume,
                        null,
                        SolidInsulationType,
                        InsulationThickness,
                        CasingType,
                        CasingThickness,
                        DesignFeaturesSection,
                        InsulationResistance,
                        TangentAngle,
                        TemperatureKoeff,
                        TechnologicalFeatures,
                        CondenserImage,
                        SpecificCapacityByWeight,
                        SpecificEnergyByWeight,
                        SpecificEnergyByVolume};
                if ((parentCondenserTypesRowByFK_Condensers_1 != null)) {
                    columnValuesArray[2] = parentCondenserTypesRowByFK_Condensers_1[0];
                }
                if ((parentInsulatingLiquidTypesRowByFK_Condensers_0 != null)) {
                    columnValuesArray[11] = parentInsulatingLiquidTypesRowByFK_Condensers_0[0];
                }
                rowCondensersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCondensersRow);
                return rowCondensersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondensersRow FindByCondenserID(long CondenserID) {
                return ((CondensersRow)(this.Rows.Find(new object[] {
                            CondenserID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                CondensersDataTable cln = ((CondensersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CondensersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCondenserID = base.Columns["CondenserID"];
                this.columnCondenserNumber = base.Columns["CondenserNumber"];
                this.columnCondenserTypeID = base.Columns["CondenserTypeID"];
                this.columnNominalVoltage = base.Columns["NominalVoltage"];
                this.columnNominalCapacitance = base.Columns["NominalCapacitance"];
                this.columnEnergyCharge = base.Columns["EnergyCharge"];
                this.columnInductivity = base.Columns["Inductivity"];
                this.columnNormalizedResource = base.Columns["NormalizedResource"];
                this.columnMaxDischargeCurrent = base.Columns["MaxDischargeCurrent"];
                this.columnCondenserWeight = base.Columns["CondenserWeight"];
                this.columnCondenserVolume = base.Columns["CondenserVolume"];
                this.columnInsulatingLiquidTypeID = base.Columns["InsulatingLiquidTypeID"];
                this.columnSolidInsulationType = base.Columns["SolidInsulationType"];
                this.columnInsulationThickness = base.Columns["InsulationThickness"];
                this.columnCasingType = base.Columns["CasingType"];
                this.columnCasingThickness = base.Columns["CasingThickness"];
                this.columnDesignFeaturesSection = base.Columns["DesignFeaturesSection"];
                this.columnInsulationResistance = base.Columns["InsulationResistance"];
                this.columnTangentAngle = base.Columns["TangentAngle"];
                this.columnTemperatureKoeff = base.Columns["TemperatureKoeff"];
                this.columnTechnologicalFeatures = base.Columns["TechnologicalFeatures"];
                this.columnCondenserImage = base.Columns["CondenserImage"];
                this.columnSpecificCapacityByWeight = base.Columns["SpecificCapacityByWeight"];
                this.columnSpecificEnergyByWeight = base.Columns["SpecificEnergyByWeight"];
                this.columnSpecificEnergyByVolume = base.Columns["SpecificEnergyByVolume"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCondenserID = new global::System.Data.DataColumn("CondenserID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondenserID);
                this.columnCondenserNumber = new global::System.Data.DataColumn("CondenserNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondenserNumber);
                this.columnCondenserTypeID = new global::System.Data.DataColumn("CondenserTypeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondenserTypeID);
                this.columnNominalVoltage = new global::System.Data.DataColumn("NominalVoltage", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNominalVoltage);
                this.columnNominalCapacitance = new global::System.Data.DataColumn("NominalCapacitance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNominalCapacitance);
                this.columnEnergyCharge = new global::System.Data.DataColumn("EnergyCharge", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnergyCharge);
                this.columnInductivity = new global::System.Data.DataColumn("Inductivity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInductivity);
                this.columnNormalizedResource = new global::System.Data.DataColumn("NormalizedResource", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormalizedResource);
                this.columnMaxDischargeCurrent = new global::System.Data.DataColumn("MaxDischargeCurrent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxDischargeCurrent);
                this.columnCondenserWeight = new global::System.Data.DataColumn("CondenserWeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondenserWeight);
                this.columnCondenserVolume = new global::System.Data.DataColumn("CondenserVolume", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondenserVolume);
                this.columnInsulatingLiquidTypeID = new global::System.Data.DataColumn("InsulatingLiquidTypeID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsulatingLiquidTypeID);
                this.columnSolidInsulationType = new global::System.Data.DataColumn("SolidInsulationType", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSolidInsulationType);
                this.columnInsulationThickness = new global::System.Data.DataColumn("InsulationThickness", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsulationThickness);
                this.columnCasingType = new global::System.Data.DataColumn("CasingType", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCasingType);
                this.columnCasingThickness = new global::System.Data.DataColumn("CasingThickness", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCasingThickness);
                this.columnDesignFeaturesSection = new global::System.Data.DataColumn("DesignFeaturesSection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignFeaturesSection);
                this.columnInsulationResistance = new global::System.Data.DataColumn("InsulationResistance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsulationResistance);
                this.columnTangentAngle = new global::System.Data.DataColumn("TangentAngle", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTangentAngle);
                this.columnTemperatureKoeff = new global::System.Data.DataColumn("TemperatureKoeff", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemperatureKoeff);
                this.columnTechnologicalFeatures = new global::System.Data.DataColumn("TechnologicalFeatures", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTechnologicalFeatures);
                this.columnCondenserImage = new global::System.Data.DataColumn("CondenserImage", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCondenserImage);
                this.columnSpecificCapacityByWeight = new global::System.Data.DataColumn("SpecificCapacityByWeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecificCapacityByWeight);
                this.columnSpecificEnergyByWeight = new global::System.Data.DataColumn("SpecificEnergyByWeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecificEnergyByWeight);
                this.columnSpecificEnergyByVolume = new global::System.Data.DataColumn("SpecificEnergyByVolume", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSpecificEnergyByVolume);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCondenserID}, true));
                this.columnCondenserID.AutoIncrement = true;
                this.columnCondenserID.AutoIncrementSeed = -1;
                this.columnCondenserID.AutoIncrementStep = -1;
                this.columnCondenserID.AllowDBNull = false;
                this.columnCondenserID.Unique = true;
                this.columnCondenserNumber.AllowDBNull = false;
                this.columnCondenserNumber.MaxLength = 256;
                this.columnCondenserTypeID.AllowDBNull = false;
                this.columnNominalVoltage.AllowDBNull = false;
                this.columnNominalCapacitance.AllowDBNull = false;
                this.columnEnergyCharge.AllowDBNull = false;
                this.columnCondenserWeight.AllowDBNull = false;
                this.columnCondenserVolume.AllowDBNull = false;
                this.columnInsulatingLiquidTypeID.AllowDBNull = false;
                this.columnSolidInsulationType.AllowDBNull = false;
                this.columnInsulationThickness.AllowDBNull = false;
                this.columnCasingType.AllowDBNull = false;
                this.columnCasingThickness.AllowDBNull = false;
                this.columnDesignFeaturesSection.MaxLength = 1024;
                this.columnTechnologicalFeatures.MaxLength = 1024;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondensersRow NewCondensersRow() {
                return ((CondensersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CondensersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(CondensersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CondensersRowChanged != null)) {
                    this.CondensersRowChanged(this, new CondensersRowChangeEvent(((CondensersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CondensersRowChanging != null)) {
                    this.CondensersRowChanging(this, new CondensersRowChangeEvent(((CondensersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CondensersRowDeleted != null)) {
                    this.CondensersRowDeleted(this, new CondensersRowChangeEvent(((CondensersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CondensersRowDeleting != null)) {
                    this.CondensersRowDeleting(this, new CondensersRowChangeEvent(((CondensersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCondensersRow(CondensersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetMain ds = new DataSetMain();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CondensersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class InsulatingLiquidTypesRow : global::System.Data.DataRow {
            
            private InsulatingLiquidTypesDataTable tableInsulatingLiquidTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal InsulatingLiquidTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInsulatingLiquidTypes = ((InsulatingLiquidTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long InsulatingLiquidTypeID {
                get {
                    return ((long)(this[this.tableInsulatingLiquidTypes.InsulatingLiquidTypeIDColumn]));
                }
                set {
                    this[this.tableInsulatingLiquidTypes.InsulatingLiquidTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string InsulatingLiquidTypeName {
                get {
                    return ((string)(this[this.tableInsulatingLiquidTypes.InsulatingLiquidTypeNameColumn]));
                }
                set {
                    this[this.tableInsulatingLiquidTypes.InsulatingLiquidTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondensersRow[] GetCondensersRows() {
                if ((this.Table.ChildRelations["FK_Condensers_0"] == null)) {
                    return new CondensersRow[0];
                }
                else {
                    return ((CondensersRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Condensers_0"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CondenserTypesRow : global::System.Data.DataRow {
            
            private CondenserTypesDataTable tableCondenserTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CondenserTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCondenserTypes = ((CondenserTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CondenserTypeID {
                get {
                    return ((long)(this[this.tableCondenserTypes.CondenserTypeIDColumn]));
                }
                set {
                    this[this.tableCondenserTypes.CondenserTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CondenserTypeName {
                get {
                    return ((string)(this[this.tableCondenserTypes.CondenserTypeNameColumn]));
                }
                set {
                    this[this.tableCondenserTypes.CondenserTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondensersRow[] GetCondensersRows() {
                if ((this.Table.ChildRelations["FK_Condensers_1"] == null)) {
                    return new CondensersRow[0];
                }
                else {
                    return ((CondensersRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Condensers_1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CondensersRow : global::System.Data.DataRow {
            
            private CondensersDataTable tableCondensers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CondensersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCondensers = ((CondensersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CondenserID {
                get {
                    return ((long)(this[this.tableCondensers.CondenserIDColumn]));
                }
                set {
                    this[this.tableCondensers.CondenserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CondenserNumber {
                get {
                    return ((string)(this[this.tableCondensers.CondenserNumberColumn]));
                }
                set {
                    this[this.tableCondensers.CondenserNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CondenserTypeID {
                get {
                    return ((long)(this[this.tableCondensers.CondenserTypeIDColumn]));
                }
                set {
                    this[this.tableCondensers.CondenserTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal NominalVoltage {
                get {
                    return ((decimal)(this[this.tableCondensers.NominalVoltageColumn]));
                }
                set {
                    this[this.tableCondensers.NominalVoltageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal NominalCapacitance {
                get {
                    return ((decimal)(this[this.tableCondensers.NominalCapacitanceColumn]));
                }
                set {
                    this[this.tableCondensers.NominalCapacitanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal EnergyCharge {
                get {
                    return ((decimal)(this[this.tableCondensers.EnergyChargeColumn]));
                }
                set {
                    this[this.tableCondensers.EnergyChargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Inductivity {
                get {
                    try {
                        return ((decimal)(this[this.tableCondensers.InductivityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Inductivity\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.InductivityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NormalizedResource {
                get {
                    try {
                        return ((long)(this[this.tableCondensers.NormalizedResourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NormalizedResource\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.NormalizedResourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MaxDischargeCurrent {
                get {
                    try {
                        return ((decimal)(this[this.tableCondensers.MaxDischargeCurrentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxDischargeCurrent\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.MaxDischargeCurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CondenserWeight {
                get {
                    return ((decimal)(this[this.tableCondensers.CondenserWeightColumn]));
                }
                set {
                    this[this.tableCondensers.CondenserWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CondenserVolume {
                get {
                    return ((decimal)(this[this.tableCondensers.CondenserVolumeColumn]));
                }
                set {
                    this[this.tableCondensers.CondenserVolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long InsulatingLiquidTypeID {
                get {
                    return ((long)(this[this.tableCondensers.InsulatingLiquidTypeIDColumn]));
                }
                set {
                    this[this.tableCondensers.InsulatingLiquidTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SolidInsulationType {
                get {
                    return ((long)(this[this.tableCondensers.SolidInsulationTypeColumn]));
                }
                set {
                    this[this.tableCondensers.SolidInsulationTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long InsulationThickness {
                get {
                    return ((long)(this[this.tableCondensers.InsulationThicknessColumn]));
                }
                set {
                    this[this.tableCondensers.InsulationThicknessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CasingType {
                get {
                    return ((long)(this[this.tableCondensers.CasingTypeColumn]));
                }
                set {
                    this[this.tableCondensers.CasingTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CasingThickness {
                get {
                    return ((long)(this[this.tableCondensers.CasingThicknessColumn]));
                }
                set {
                    this[this.tableCondensers.CasingThicknessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DesignFeaturesSection {
                get {
                    try {
                        return ((string)(this[this.tableCondensers.DesignFeaturesSectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DesignFeaturesSection\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.DesignFeaturesSectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal InsulationResistance {
                get {
                    try {
                        return ((decimal)(this[this.tableCondensers.InsulationResistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsulationResistance\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.InsulationResistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TangentAngle {
                get {
                    try {
                        return ((decimal)(this[this.tableCondensers.TangentAngleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TangentAngle\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.TangentAngleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TemperatureKoeff {
                get {
                    try {
                        return ((decimal)(this[this.tableCondensers.TemperatureKoeffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemperatureKoeff\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.TemperatureKoeffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TechnologicalFeatures {
                get {
                    try {
                        return ((string)(this[this.tableCondensers.TechnologicalFeaturesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TechnologicalFeatures\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.TechnologicalFeaturesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] CondenserImage {
                get {
                    try {
                        return ((byte[])(this[this.tableCondensers.CondenserImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CondenserImage\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.CondenserImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SpecificCapacityByWeight {
                get {
                    try {
                        return ((decimal)(this[this.tableCondensers.SpecificCapacityByWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecificCapacityByWeight\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.SpecificCapacityByWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SpecificEnergyByWeight {
                get {
                    try {
                        return ((decimal)(this[this.tableCondensers.SpecificEnergyByWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecificEnergyByWeight\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.SpecificEnergyByWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SpecificEnergyByVolume {
                get {
                    try {
                        return ((decimal)(this[this.tableCondensers.SpecificEnergyByVolumeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SpecificEnergyByVolume\' in table \'Condensers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCondensers.SpecificEnergyByVolumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InsulatingLiquidTypesRow InsulatingLiquidTypesRow {
                get {
                    return ((InsulatingLiquidTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Condensers_0"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Condensers_0"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondenserTypesRow CondenserTypesRow {
                get {
                    return ((CondenserTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Condensers_1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Condensers_1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInductivityNull() {
                return this.IsNull(this.tableCondensers.InductivityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInductivityNull() {
                this[this.tableCondensers.InductivityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNormalizedResourceNull() {
                return this.IsNull(this.tableCondensers.NormalizedResourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNormalizedResourceNull() {
                this[this.tableCondensers.NormalizedResourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMaxDischargeCurrentNull() {
                return this.IsNull(this.tableCondensers.MaxDischargeCurrentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMaxDischargeCurrentNull() {
                this[this.tableCondensers.MaxDischargeCurrentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDesignFeaturesSectionNull() {
                return this.IsNull(this.tableCondensers.DesignFeaturesSectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDesignFeaturesSectionNull() {
                this[this.tableCondensers.DesignFeaturesSectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInsulationResistanceNull() {
                return this.IsNull(this.tableCondensers.InsulationResistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInsulationResistanceNull() {
                this[this.tableCondensers.InsulationResistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTangentAngleNull() {
                return this.IsNull(this.tableCondensers.TangentAngleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTangentAngleNull() {
                this[this.tableCondensers.TangentAngleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTemperatureKoeffNull() {
                return this.IsNull(this.tableCondensers.TemperatureKoeffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTemperatureKoeffNull() {
                this[this.tableCondensers.TemperatureKoeffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTechnologicalFeaturesNull() {
                return this.IsNull(this.tableCondensers.TechnologicalFeaturesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTechnologicalFeaturesNull() {
                this[this.tableCondensers.TechnologicalFeaturesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCondenserImageNull() {
                return this.IsNull(this.tableCondensers.CondenserImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCondenserImageNull() {
                this[this.tableCondensers.CondenserImageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSpecificCapacityByWeightNull() {
                return this.IsNull(this.tableCondensers.SpecificCapacityByWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSpecificCapacityByWeightNull() {
                this[this.tableCondensers.SpecificCapacityByWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSpecificEnergyByWeightNull() {
                return this.IsNull(this.tableCondensers.SpecificEnergyByWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSpecificEnergyByWeightNull() {
                this[this.tableCondensers.SpecificEnergyByWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSpecificEnergyByVolumeNull() {
                return this.IsNull(this.tableCondensers.SpecificEnergyByVolumeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSpecificEnergyByVolumeNull() {
                this[this.tableCondensers.SpecificEnergyByVolumeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class InsulatingLiquidTypesRowChangeEvent : global::System.EventArgs {
            
            private InsulatingLiquidTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InsulatingLiquidTypesRowChangeEvent(InsulatingLiquidTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public InsulatingLiquidTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CondenserTypesRowChangeEvent : global::System.EventArgs {
            
            private CondenserTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondenserTypesRowChangeEvent(CondenserTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondenserTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CondensersRowChangeEvent : global::System.EventArgs {
            
            private CondensersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondensersRowChangeEvent(CondensersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CondensersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Condenser.DataSetMainTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InsulatingLiquidTypesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public InsulatingLiquidTypesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InsulatingLiquidTypes";
            tableMapping.ColumnMappings.Add("InsulatingLiquidTypeID", "InsulatingLiquidTypeID");
            tableMapping.ColumnMappings.Add("InsulatingLiquidTypeName", "InsulatingLiquidTypeName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [InsulatingLiquidTypes] WHERE (([InsulatingLiquidTypeID] = @Original_" +
                "InsulatingLiquidTypeID) AND ([InsulatingLiquidTypeName] = @Original_InsulatingLi" +
                "quidTypeName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulatingLiquidTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulatingLiquidTypeID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulatingLiquidTypeName";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "InsulatingLiquidTypeName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [InsulatingLiquidTypes] ([InsulatingLiquidTypeName]) VALUES (@Insulat" +
                "ingLiquidTypeName)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InsulatingLiquidTypeName";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "InsulatingLiquidTypeName";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [InsulatingLiquidTypes] SET [InsulatingLiquidTypeName] = @InsulatingLiquid" +
                "TypeName WHERE (([InsulatingLiquidTypeID] = @Original_InsulatingLiquidTypeID) AN" +
                "D ([InsulatingLiquidTypeName] = @Original_InsulatingLiquidTypeName))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InsulatingLiquidTypeName";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "InsulatingLiquidTypeName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulatingLiquidTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulatingLiquidTypeID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulatingLiquidTypeName";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "InsulatingLiquidTypeName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::Condenser.Properties.Settings.Default.condenserConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [InsulatingLiquidTypeID], [InsulatingLiquidTypeName] FROM [InsulatingLiqui" +
                "dTypes]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetMain.InsulatingLiquidTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetMain.InsulatingLiquidTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetMain.InsulatingLiquidTypesDataTable dataTable = new DataSetMain.InsulatingLiquidTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetMain.InsulatingLiquidTypesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetMain dataSet) {
            return this.Adapter.Update(dataSet, "InsulatingLiquidTypes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_InsulatingLiquidTypeID, string Original_InsulatingLiquidTypeName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_InsulatingLiquidTypeID));
            if ((Original_InsulatingLiquidTypeName == null)) {
                throw new global::System.ArgumentNullException("Original_InsulatingLiquidTypeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_InsulatingLiquidTypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string InsulatingLiquidTypeName) {
            if ((InsulatingLiquidTypeName == null)) {
                throw new global::System.ArgumentNullException("InsulatingLiquidTypeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(InsulatingLiquidTypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string InsulatingLiquidTypeName, long Original_InsulatingLiquidTypeID, string Original_InsulatingLiquidTypeName) {
            if ((InsulatingLiquidTypeName == null)) {
                throw new global::System.ArgumentNullException("InsulatingLiquidTypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(InsulatingLiquidTypeName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(Original_InsulatingLiquidTypeID));
            if ((Original_InsulatingLiquidTypeName == null)) {
                throw new global::System.ArgumentNullException("Original_InsulatingLiquidTypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_InsulatingLiquidTypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CondenserTypesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CondenserTypesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CondenserTypes";
            tableMapping.ColumnMappings.Add("CondenserTypeID", "CondenserTypeID");
            tableMapping.ColumnMappings.Add("CondenserTypeName", "CondenserTypeName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [CondenserTypes] WHERE (([CondenserTypeID] = @Original_CondenserTypeI" +
                "D) AND ([CondenserTypeName] = @Original_CondenserTypeName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CondenserTypeID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserTypeName";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CondenserTypeName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [CondenserTypes] ([CondenserTypeName]) VALUES (@CondenserTypeName)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserTypeName";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CondenserTypeName";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [CondenserTypes] SET [CondenserTypeName] = @CondenserTypeName WHERE (([Con" +
                "denserTypeID] = @Original_CondenserTypeID) AND ([CondenserTypeName] = @Original_" +
                "CondenserTypeName))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserTypeName";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CondenserTypeName";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CondenserTypeID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserTypeName";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CondenserTypeName";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::Condenser.Properties.Settings.Default.condenserConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [CondenserTypeID], [CondenserTypeName] FROM [CondenserTypes]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetMain.CondenserTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetMain.CondenserTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetMain.CondenserTypesDataTable dataTable = new DataSetMain.CondenserTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetMain.CondenserTypesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetMain dataSet) {
            return this.Adapter.Update(dataSet, "CondenserTypes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_CondenserTypeID, string Original_CondenserTypeName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_CondenserTypeID));
            if ((Original_CondenserTypeName == null)) {
                throw new global::System.ArgumentNullException("Original_CondenserTypeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CondenserTypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CondenserTypeName) {
            if ((CondenserTypeName == null)) {
                throw new global::System.ArgumentNullException("CondenserTypeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CondenserTypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CondenserTypeName, long Original_CondenserTypeID, string Original_CondenserTypeName) {
            if ((CondenserTypeName == null)) {
                throw new global::System.ArgumentNullException("CondenserTypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CondenserTypeName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(Original_CondenserTypeID));
            if ((Original_CondenserTypeName == null)) {
                throw new global::System.ArgumentNullException("Original_CondenserTypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_CondenserTypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CondensersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CondensersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Condensers";
            tableMapping.ColumnMappings.Add("CondenserID", "CondenserID");
            tableMapping.ColumnMappings.Add("CondenserNumber", "CondenserNumber");
            tableMapping.ColumnMappings.Add("CondenserTypeID", "CondenserTypeID");
            tableMapping.ColumnMappings.Add("NominalVoltage", "NominalVoltage");
            tableMapping.ColumnMappings.Add("NominalCapacitance", "NominalCapacitance");
            tableMapping.ColumnMappings.Add("EnergyCharge", "EnergyCharge");
            tableMapping.ColumnMappings.Add("Inductivity", "Inductivity");
            tableMapping.ColumnMappings.Add("NormalizedResource", "NormalizedResource");
            tableMapping.ColumnMappings.Add("MaxDischargeCurrent", "MaxDischargeCurrent");
            tableMapping.ColumnMappings.Add("CondenserWeight", "CondenserWeight");
            tableMapping.ColumnMappings.Add("CondenserVolume", "CondenserVolume");
            tableMapping.ColumnMappings.Add("InsulatingLiquidTypeID", "InsulatingLiquidTypeID");
            tableMapping.ColumnMappings.Add("SolidInsulationType", "SolidInsulationType");
            tableMapping.ColumnMappings.Add("InsulationThickness", "InsulationThickness");
            tableMapping.ColumnMappings.Add("CasingType", "CasingType");
            tableMapping.ColumnMappings.Add("CasingThickness", "CasingThickness");
            tableMapping.ColumnMappings.Add("DesignFeaturesSection", "DesignFeaturesSection");
            tableMapping.ColumnMappings.Add("InsulationResistance", "InsulationResistance");
            tableMapping.ColumnMappings.Add("TangentAngle", "TangentAngle");
            tableMapping.ColumnMappings.Add("TemperatureKoeff", "TemperatureKoeff");
            tableMapping.ColumnMappings.Add("TechnologicalFeatures", "TechnologicalFeatures");
            tableMapping.ColumnMappings.Add("CondenserImage", "CondenserImage");
            tableMapping.ColumnMappings.Add("SpecificCapacityByWeight", "SpecificCapacityByWeight");
            tableMapping.ColumnMappings.Add("SpecificEnergyByWeight", "SpecificEnergyByWeight");
            tableMapping.ColumnMappings.Add("SpecificEnergyByVolume", "SpecificEnergyByVolume");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [Condensers] WHERE (([CondenserID] = @Original_CondenserID) AND ([Con" +
                "denserNumber] = @Original_CondenserNumber) AND ([CondenserTypeID] = @Original_Co" +
                "ndenserTypeID) AND ([NominalVoltage] = @Original_NominalVoltage) AND ([NominalCa" +
                "pacitance] = @Original_NominalCapacitance) AND ([EnergyCharge] = @Original_Energ" +
                "yCharge) AND ((@IsNull_Inductivity = 1 AND [Inductivity] IS NULL) OR ([Inductivi" +
                "ty] = @Original_Inductivity)) AND ((@IsNull_NormalizedResource = 1 AND [Normaliz" +
                "edResource] IS NULL) OR ([NormalizedResource] = @Original_NormalizedResource)) A" +
                "ND ((@IsNull_MaxDischargeCurrent = 1 AND [MaxDischargeCurrent] IS NULL) OR ([Max" +
                "DischargeCurrent] = @Original_MaxDischargeCurrent)) AND ([CondenserWeight] = @Or" +
                "iginal_CondenserWeight) AND ([CondenserVolume] = @Original_CondenserVolume) AND " +
                "([InsulatingLiquidTypeID] = @Original_InsulatingLiquidTypeID) AND ([SolidInsulat" +
                "ionType] = @Original_SolidInsulationType) AND ([InsulationThickness] = @Original" +
                "_InsulationThickness) AND ([CasingType] = @Original_CasingType) AND ([CasingThic" +
                "kness] = @Original_CasingThickness) AND ((@IsNull_DesignFeaturesSection = 1 AND " +
                "[DesignFeaturesSection] IS NULL) OR ([DesignFeaturesSection] = @Original_DesignF" +
                "eaturesSection)) AND ((@IsNull_InsulationResistance = 1 AND [InsulationResistanc" +
                "e] IS NULL) OR ([InsulationResistance] = @Original_InsulationResistance)) AND ((" +
                "@IsNull_TangentAngle = 1 AND [TangentAngle] IS NULL) OR ([TangentAngle] = @Origi" +
                "nal_TangentAngle)) AND ((@IsNull_TemperatureKoeff = 1 AND [TemperatureKoeff] IS " +
                "NULL) OR ([TemperatureKoeff] = @Original_TemperatureKoeff)) AND ((@IsNull_Techno" +
                "logicalFeatures = 1 AND [TechnologicalFeatures] IS NULL) OR ([TechnologicalFeatu" +
                "res] = @Original_TechnologicalFeatures)) AND ((@IsNull_CondenserImage = 1 AND [C" +
                "ondenserImage] IS NULL) OR ([CondenserImage] = @Original_CondenserImage)) AND ((" +
                "@IsNull_SpecificCapacityByWeight = 1 AND [SpecificCapacityByWeight] IS NULL) OR " +
                "([SpecificCapacityByWeight] = @Original_SpecificCapacityByWeight)) AND ((@IsNull" +
                "_SpecificEnergyByWeight = 1 AND [SpecificEnergyByWeight] IS NULL) OR ([SpecificE" +
                "nergyByWeight] = @Original_SpecificEnergyByWeight)) AND ((@IsNull_SpecificEnergy" +
                "ByVolume = 1 AND [SpecificEnergyByVolume] IS NULL) OR ([SpecificEnergyByVolume] " +
                "= @Original_SpecificEnergyByVolume)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CondenserID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserNumber";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CondenserNumber";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CondenserTypeID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NominalVoltage";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "NominalVoltage";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NominalCapacitance";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "NominalCapacitance";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EnergyCharge";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "EnergyCharge";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Inductivity";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Inductivity";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Inductivity";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Inductivity";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NormalizedResource";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NormalizedResource";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NormalizedResource";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NormalizedResource";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxDischargeCurrent";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MaxDischargeCurrent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxDischargeCurrent";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxDischargeCurrent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CondenserWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserVolume";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CondenserVolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulatingLiquidTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulatingLiquidTypeID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SolidInsulationType";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SolidInsulationType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulationThickness";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulationThickness";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CasingType";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CasingType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CasingThickness";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CasingThickness";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DesignFeaturesSection";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DesignFeaturesSection";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DesignFeaturesSection";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "DesignFeaturesSection";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_InsulationResistance";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "InsulationResistance";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulationResistance";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "InsulationResistance";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TangentAngle";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TangentAngle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TangentAngle";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TangentAngle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TemperatureKoeff";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TemperatureKoeff";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TemperatureKoeff";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TemperatureKoeff";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TechnologicalFeatures";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TechnologicalFeatures";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TechnologicalFeatures";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TechnologicalFeatures";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CondenserImage";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CondenserImage";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserImage";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "CondenserImage";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SpecificCapacityByWeight";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SpecificCapacityByWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SpecificCapacityByWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificCapacityByWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SpecificEnergyByWeight";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SpecificEnergyByWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SpecificEnergyByWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificEnergyByWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SpecificEnergyByVolume";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SpecificEnergyByVolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SpecificEnergyByVolume";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificEnergyByVolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [Condensers] ([CondenserNumber], [CondenserTypeID], [NominalVoltage], [NominalCapacitance], [EnergyCharge], [Inductivity], [NormalizedResource], [MaxDischargeCurrent], [CondenserWeight], [CondenserVolume], [InsulatingLiquidTypeID], [SolidInsulationType], [InsulationThickness], [CasingType], [CasingThickness], [DesignFeaturesSection], [InsulationResistance], [TangentAngle], [TemperatureKoeff], [TechnologicalFeatures], [CondenserImage], [SpecificCapacityByWeight], [SpecificEnergyByWeight], [SpecificEnergyByVolume]) VALUES (@CondenserNumber, @CondenserTypeID, @NominalVoltage, @NominalCapacitance, @EnergyCharge, @Inductivity, @NormalizedResource, @MaxDischargeCurrent, @CondenserWeight, @CondenserVolume, @InsulatingLiquidTypeID, @SolidInsulationType, @InsulationThickness, @CasingType, @CasingThickness, @DesignFeaturesSection, @InsulationResistance, @TangentAngle, @TemperatureKoeff, @TechnologicalFeatures, @CondenserImage, @SpecificCapacityByWeight, @SpecificEnergyByWeight, @SpecificEnergyByVolume)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserNumber";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CondenserNumber";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CondenserTypeID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NominalVoltage";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "NominalVoltage";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NominalCapacitance";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "NominalCapacitance";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EnergyCharge";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "EnergyCharge";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Inductivity";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Inductivity";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NormalizedResource";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NormalizedResource";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxDischargeCurrent";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxDischargeCurrent";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CondenserWeight";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserVolume";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CondenserVolume";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InsulatingLiquidTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulatingLiquidTypeID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SolidInsulationType";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SolidInsulationType";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InsulationThickness";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulationThickness";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CasingType";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CasingType";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CasingThickness";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CasingThickness";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DesignFeaturesSection";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "DesignFeaturesSection";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InsulationResistance";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "InsulationResistance";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TangentAngle";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TangentAngle";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TemperatureKoeff";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TemperatureKoeff";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TechnologicalFeatures";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TechnologicalFeatures";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserImage";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "CondenserImage";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SpecificCapacityByWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificCapacityByWeight";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SpecificEnergyByWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificEnergyByWeight";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SpecificEnergyByVolume";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificEnergyByVolume";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [Condensers] SET [CondenserNumber] = @CondenserNumber, [CondenserTypeID] =" +
                " @CondenserTypeID, [NominalVoltage] = @NominalVoltage, [NominalCapacitance] = @N" +
                "ominalCapacitance, [EnergyCharge] = @EnergyCharge, [Inductivity] = @Inductivity," +
                " [NormalizedResource] = @NormalizedResource, [MaxDischargeCurrent] = @MaxDischar" +
                "geCurrent, [CondenserWeight] = @CondenserWeight, [CondenserVolume] = @CondenserV" +
                "olume, [InsulatingLiquidTypeID] = @InsulatingLiquidTypeID, [SolidInsulationType]" +
                " = @SolidInsulationType, [InsulationThickness] = @InsulationThickness, [CasingTy" +
                "pe] = @CasingType, [CasingThickness] = @CasingThickness, [DesignFeaturesSection]" +
                " = @DesignFeaturesSection, [InsulationResistance] = @InsulationResistance, [Tang" +
                "entAngle] = @TangentAngle, [TemperatureKoeff] = @TemperatureKoeff, [Technologica" +
                "lFeatures] = @TechnologicalFeatures, [CondenserImage] = @CondenserImage, [Specif" +
                "icCapacityByWeight] = @SpecificCapacityByWeight, [SpecificEnergyByWeight] = @Spe" +
                "cificEnergyByWeight, [SpecificEnergyByVolume] = @SpecificEnergyByVolume WHERE ((" +
                "[CondenserID] = @Original_CondenserID) AND ([CondenserNumber] = @Original_Conden" +
                "serNumber) AND ([CondenserTypeID] = @Original_CondenserTypeID) AND ([NominalVolt" +
                "age] = @Original_NominalVoltage) AND ([NominalCapacitance] = @Original_NominalCa" +
                "pacitance) AND ([EnergyCharge] = @Original_EnergyCharge) AND ((@IsNull_Inductivi" +
                "ty = 1 AND [Inductivity] IS NULL) OR ([Inductivity] = @Original_Inductivity)) AN" +
                "D ((@IsNull_NormalizedResource = 1 AND [NormalizedResource] IS NULL) OR ([Normal" +
                "izedResource] = @Original_NormalizedResource)) AND ((@IsNull_MaxDischargeCurrent" +
                " = 1 AND [MaxDischargeCurrent] IS NULL) OR ([MaxDischargeCurrent] = @Original_Ma" +
                "xDischargeCurrent)) AND ([CondenserWeight] = @Original_CondenserWeight) AND ([Co" +
                "ndenserVolume] = @Original_CondenserVolume) AND ([InsulatingLiquidTypeID] = @Ori" +
                "ginal_InsulatingLiquidTypeID) AND ([SolidInsulationType] = @Original_SolidInsula" +
                "tionType) AND ([InsulationThickness] = @Original_InsulationThickness) AND ([Casi" +
                "ngType] = @Original_CasingType) AND ([CasingThickness] = @Original_CasingThickne" +
                "ss) AND ((@IsNull_DesignFeaturesSection = 1 AND [DesignFeaturesSection] IS NULL)" +
                " OR ([DesignFeaturesSection] = @Original_DesignFeaturesSection)) AND ((@IsNull_I" +
                "nsulationResistance = 1 AND [InsulationResistance] IS NULL) OR ([InsulationResis" +
                "tance] = @Original_InsulationResistance)) AND ((@IsNull_TangentAngle = 1 AND [Ta" +
                "ngentAngle] IS NULL) OR ([TangentAngle] = @Original_TangentAngle)) AND ((@IsNull" +
                "_TemperatureKoeff = 1 AND [TemperatureKoeff] IS NULL) OR ([TemperatureKoeff] = @" +
                "Original_TemperatureKoeff)) AND ((@IsNull_TechnologicalFeatures = 1 AND [Technol" +
                "ogicalFeatures] IS NULL) OR ([TechnologicalFeatures] = @Original_TechnologicalFe" +
                "atures)) AND ((@IsNull_CondenserImage = 1 AND [CondenserImage] IS NULL) OR ([Con" +
                "denserImage] = @Original_CondenserImage)) AND ((@IsNull_SpecificCapacityByWeight" +
                " = 1 AND [SpecificCapacityByWeight] IS NULL) OR ([SpecificCapacityByWeight] = @O" +
                "riginal_SpecificCapacityByWeight)) AND ((@IsNull_SpecificEnergyByWeight = 1 AND " +
                "[SpecificEnergyByWeight] IS NULL) OR ([SpecificEnergyByWeight] = @Original_Speci" +
                "ficEnergyByWeight)) AND ((@IsNull_SpecificEnergyByVolume = 1 AND [SpecificEnergy" +
                "ByVolume] IS NULL) OR ([SpecificEnergyByVolume] = @Original_SpecificEnergyByVolu" +
                "me)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserNumber";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CondenserNumber";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CondenserTypeID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NominalVoltage";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "NominalVoltage";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NominalCapacitance";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "NominalCapacitance";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EnergyCharge";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "EnergyCharge";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Inductivity";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Inductivity";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NormalizedResource";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NormalizedResource";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MaxDischargeCurrent";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxDischargeCurrent";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CondenserWeight";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserVolume";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CondenserVolume";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InsulatingLiquidTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulatingLiquidTypeID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SolidInsulationType";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SolidInsulationType";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InsulationThickness";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulationThickness";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CasingType";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CasingType";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CasingThickness";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CasingThickness";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DesignFeaturesSection";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "DesignFeaturesSection";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@InsulationResistance";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "InsulationResistance";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TangentAngle";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TangentAngle";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TemperatureKoeff";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TemperatureKoeff";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TechnologicalFeatures";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TechnologicalFeatures";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CondenserImage";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "CondenserImage";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SpecificCapacityByWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificCapacityByWeight";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SpecificEnergyByWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificEnergyByWeight";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SpecificEnergyByVolume";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificEnergyByVolume";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CondenserID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserNumber";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "CondenserNumber";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CondenserTypeID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NominalVoltage";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "NominalVoltage";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NominalCapacitance";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "NominalCapacitance";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EnergyCharge";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "EnergyCharge";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_Inductivity";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "Inductivity";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_Inductivity";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "Inductivity";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NormalizedResource";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NormalizedResource";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NormalizedResource";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NormalizedResource";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MaxDischargeCurrent";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MaxDischargeCurrent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MaxDischargeCurrent";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MaxDischargeCurrent";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CondenserWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserVolume";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "CondenserVolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulatingLiquidTypeID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulatingLiquidTypeID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SolidInsulationType";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SolidInsulationType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulationThickness";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "InsulationThickness";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CasingType";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CasingType";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CasingThickness";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CasingThickness";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DesignFeaturesSection";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DesignFeaturesSection";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DesignFeaturesSection";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "DesignFeaturesSection";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_InsulationResistance";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "InsulationResistance";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_InsulationResistance";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "InsulationResistance";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TangentAngle";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TangentAngle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TangentAngle";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TangentAngle";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TemperatureKoeff";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TemperatureKoeff";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TemperatureKoeff";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TemperatureKoeff";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TechnologicalFeatures";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TechnologicalFeatures";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TechnologicalFeatures";
            param.DbType = global::System.Data.DbType.String;
            param.SourceColumn = "TechnologicalFeatures";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CondenserImage";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CondenserImage";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CondenserImage";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "CondenserImage";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SpecificCapacityByWeight";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SpecificCapacityByWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SpecificCapacityByWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificCapacityByWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SpecificEnergyByWeight";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SpecificEnergyByWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SpecificEnergyByWeight";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificEnergyByWeight";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SpecificEnergyByVolume";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SpecificEnergyByVolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SpecificEnergyByVolume";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "SpecificEnergyByVolume";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::Condenser.Properties.Settings.Default.condenserConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [CondenserID], [CondenserNumber], [CondenserTypeID], [NominalVoltage], [NominalCapacitance], [EnergyCharge], [Inductivity], [NormalizedResource], [MaxDischargeCurrent], [CondenserWeight], [CondenserVolume], [InsulatingLiquidTypeID], [SolidInsulationType], [InsulationThickness], [CasingType], [CasingThickness], [DesignFeaturesSection], [InsulationResistance], [TangentAngle], [TemperatureKoeff], [TechnologicalFeatures], [CondenserImage], [SpecificCapacityByWeight], [SpecificEnergyByWeight], [SpecificEnergyByVolume] FROM [Condensers]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetMain.CondensersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetMain.CondensersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetMain.CondensersDataTable dataTable = new DataSetMain.CondensersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetMain.CondensersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetMain dataSet) {
            return this.Adapter.Update(dataSet, "Condensers");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_CondenserID, 
                    string Original_CondenserNumber, 
                    long Original_CondenserTypeID, 
                    decimal Original_NominalVoltage, 
                    decimal Original_NominalCapacitance, 
                    decimal Original_EnergyCharge, 
                    global::System.Nullable<decimal> Original_Inductivity, 
                    global::System.Nullable<long> Original_NormalizedResource, 
                    global::System.Nullable<decimal> Original_MaxDischargeCurrent, 
                    decimal Original_CondenserWeight, 
                    decimal Original_CondenserVolume, 
                    long Original_InsulatingLiquidTypeID, 
                    long Original_SolidInsulationType, 
                    long Original_InsulationThickness, 
                    long Original_CasingType, 
                    long Original_CasingThickness, 
                    string Original_DesignFeaturesSection, 
                    global::System.Nullable<decimal> Original_InsulationResistance, 
                    global::System.Nullable<decimal> Original_TangentAngle, 
                    global::System.Nullable<decimal> Original_TemperatureKoeff, 
                    string Original_TechnologicalFeatures, 
                    byte[] Original_CondenserImage, 
                    global::System.Nullable<decimal> Original_SpecificCapacityByWeight, 
                    global::System.Nullable<decimal> Original_SpecificEnergyByWeight, 
                    global::System.Nullable<decimal> Original_SpecificEnergyByVolume) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_CondenserID));
            if ((Original_CondenserNumber == null)) {
                throw new global::System.ArgumentNullException("Original_CondenserNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CondenserNumber));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_CondenserTypeID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_NominalVoltage));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_NominalCapacitance));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_EnergyCharge));
            if ((Original_Inductivity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_Inductivity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_NormalizedResource.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((long)(Original_NormalizedResource.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_MaxDischargeCurrent.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_MaxDischargeCurrent.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_CondenserWeight));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((decimal)(Original_CondenserVolume));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_InsulatingLiquidTypeID));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((long)(Original_SolidInsulationType));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((long)(Original_InsulationThickness));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((long)(Original_CasingType));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((long)(Original_CasingThickness));
            if ((Original_DesignFeaturesSection == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_DesignFeaturesSection));
            }
            if ((Original_InsulationResistance.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_InsulationResistance.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_TangentAngle.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((decimal)(Original_TangentAngle.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_TemperatureKoeff.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((decimal)(Original_TemperatureKoeff.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_TechnologicalFeatures == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_TechnologicalFeatures));
            }
            if ((Original_CondenserImage == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((byte[])(Original_CondenserImage));
            }
            if ((Original_SpecificCapacityByWeight.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((decimal)(Original_SpecificCapacityByWeight.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_SpecificEnergyByWeight.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((decimal)(Original_SpecificEnergyByWeight.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_SpecificEnergyByVolume.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((decimal)(Original_SpecificEnergyByVolume.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string CondenserNumber, 
                    long CondenserTypeID, 
                    decimal NominalVoltage, 
                    decimal NominalCapacitance, 
                    decimal EnergyCharge, 
                    global::System.Nullable<decimal> Inductivity, 
                    global::System.Nullable<long> NormalizedResource, 
                    global::System.Nullable<decimal> MaxDischargeCurrent, 
                    decimal CondenserWeight, 
                    decimal CondenserVolume, 
                    long InsulatingLiquidTypeID, 
                    long SolidInsulationType, 
                    long InsulationThickness, 
                    long CasingType, 
                    long CasingThickness, 
                    string DesignFeaturesSection, 
                    global::System.Nullable<decimal> InsulationResistance, 
                    global::System.Nullable<decimal> TangentAngle, 
                    global::System.Nullable<decimal> TemperatureKoeff, 
                    string TechnologicalFeatures, 
                    byte[] CondenserImage, 
                    global::System.Nullable<decimal> SpecificCapacityByWeight, 
                    global::System.Nullable<decimal> SpecificEnergyByWeight, 
                    global::System.Nullable<decimal> SpecificEnergyByVolume) {
            if ((CondenserNumber == null)) {
                throw new global::System.ArgumentNullException("CondenserNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CondenserNumber));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(CondenserTypeID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(NominalVoltage));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(NominalCapacitance));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(EnergyCharge));
            if ((Inductivity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Inductivity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((NormalizedResource.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(NormalizedResource.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((MaxDischargeCurrent.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(MaxDischargeCurrent.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(CondenserWeight));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(CondenserVolume));
            this.Adapter.InsertCommand.Parameters[10].Value = ((long)(InsulatingLiquidTypeID));
            this.Adapter.InsertCommand.Parameters[11].Value = ((long)(SolidInsulationType));
            this.Adapter.InsertCommand.Parameters[12].Value = ((long)(InsulationThickness));
            this.Adapter.InsertCommand.Parameters[13].Value = ((long)(CasingType));
            this.Adapter.InsertCommand.Parameters[14].Value = ((long)(CasingThickness));
            if ((DesignFeaturesSection == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(DesignFeaturesSection));
            }
            if ((InsulationResistance.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(InsulationResistance.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((TangentAngle.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(TangentAngle.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((TemperatureKoeff.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(TemperatureKoeff.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((TechnologicalFeatures == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(TechnologicalFeatures));
            }
            if ((CondenserImage == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((byte[])(CondenserImage));
            }
            if ((SpecificCapacityByWeight.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(SpecificCapacityByWeight.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((SpecificEnergyByWeight.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(SpecificEnergyByWeight.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((SpecificEnergyByVolume.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(SpecificEnergyByVolume.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CondenserNumber, 
                    long CondenserTypeID, 
                    decimal NominalVoltage, 
                    decimal NominalCapacitance, 
                    decimal EnergyCharge, 
                    global::System.Nullable<decimal> Inductivity, 
                    global::System.Nullable<long> NormalizedResource, 
                    global::System.Nullable<decimal> MaxDischargeCurrent, 
                    decimal CondenserWeight, 
                    decimal CondenserVolume, 
                    long InsulatingLiquidTypeID, 
                    long SolidInsulationType, 
                    long InsulationThickness, 
                    long CasingType, 
                    long CasingThickness, 
                    string DesignFeaturesSection, 
                    global::System.Nullable<decimal> InsulationResistance, 
                    global::System.Nullable<decimal> TangentAngle, 
                    global::System.Nullable<decimal> TemperatureKoeff, 
                    string TechnologicalFeatures, 
                    byte[] CondenserImage, 
                    global::System.Nullable<decimal> SpecificCapacityByWeight, 
                    global::System.Nullable<decimal> SpecificEnergyByWeight, 
                    global::System.Nullable<decimal> SpecificEnergyByVolume, 
                    long Original_CondenserID, 
                    string Original_CondenserNumber, 
                    long Original_CondenserTypeID, 
                    decimal Original_NominalVoltage, 
                    decimal Original_NominalCapacitance, 
                    decimal Original_EnergyCharge, 
                    global::System.Nullable<decimal> Original_Inductivity, 
                    global::System.Nullable<long> Original_NormalizedResource, 
                    global::System.Nullable<decimal> Original_MaxDischargeCurrent, 
                    decimal Original_CondenserWeight, 
                    decimal Original_CondenserVolume, 
                    long Original_InsulatingLiquidTypeID, 
                    long Original_SolidInsulationType, 
                    long Original_InsulationThickness, 
                    long Original_CasingType, 
                    long Original_CasingThickness, 
                    string Original_DesignFeaturesSection, 
                    global::System.Nullable<decimal> Original_InsulationResistance, 
                    global::System.Nullable<decimal> Original_TangentAngle, 
                    global::System.Nullable<decimal> Original_TemperatureKoeff, 
                    string Original_TechnologicalFeatures, 
                    byte[] Original_CondenserImage, 
                    global::System.Nullable<decimal> Original_SpecificCapacityByWeight, 
                    global::System.Nullable<decimal> Original_SpecificEnergyByWeight, 
                    global::System.Nullable<decimal> Original_SpecificEnergyByVolume) {
            if ((CondenserNumber == null)) {
                throw new global::System.ArgumentNullException("CondenserNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CondenserNumber));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(CondenserTypeID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(NominalVoltage));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(NominalCapacitance));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(EnergyCharge));
            if ((Inductivity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Inductivity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((NormalizedResource.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(NormalizedResource.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((MaxDischargeCurrent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(MaxDischargeCurrent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(CondenserWeight));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(CondenserVolume));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(InsulatingLiquidTypeID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(SolidInsulationType));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(InsulationThickness));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(CasingType));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(CasingThickness));
            if ((DesignFeaturesSection == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(DesignFeaturesSection));
            }
            if ((InsulationResistance.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(InsulationResistance.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((TangentAngle.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(TangentAngle.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((TemperatureKoeff.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(TemperatureKoeff.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((TechnologicalFeatures == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(TechnologicalFeatures));
            }
            if ((CondenserImage == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((byte[])(CondenserImage));
            }
            if ((SpecificCapacityByWeight.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(SpecificCapacityByWeight.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((SpecificEnergyByWeight.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(SpecificEnergyByWeight.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((SpecificEnergyByVolume.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(SpecificEnergyByVolume.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(Original_CondenserID));
            if ((Original_CondenserNumber == null)) {
                throw new global::System.ArgumentNullException("Original_CondenserNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_CondenserNumber));
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((long)(Original_CondenserTypeID));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((decimal)(Original_NominalVoltage));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(Original_NominalCapacitance));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(Original_EnergyCharge));
            if ((Original_Inductivity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(Original_Inductivity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_NormalizedResource.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((long)(Original_NormalizedResource.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_MaxDischargeCurrent.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_MaxDischargeCurrent.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(Original_CondenserWeight));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((decimal)(Original_CondenserVolume));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((long)(Original_InsulatingLiquidTypeID));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((long)(Original_SolidInsulationType));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((long)(Original_InsulationThickness));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((long)(Original_CasingType));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((long)(Original_CasingThickness));
            if ((Original_DesignFeaturesSection == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_DesignFeaturesSection));
            }
            if ((Original_InsulationResistance.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((decimal)(Original_InsulationResistance.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_TangentAngle.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((decimal)(Original_TangentAngle.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_TemperatureKoeff.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((decimal)(Original_TemperatureKoeff.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_TechnologicalFeatures == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_TechnologicalFeatures));
            }
            if ((Original_CondenserImage == null)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((byte[])(Original_CondenserImage));
            }
            if ((Original_SpecificCapacityByWeight.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((decimal)(Original_SpecificCapacityByWeight.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_SpecificEnergyByWeight.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((decimal)(Original_SpecificEnergyByWeight.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_SpecificEnergyByVolume.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((decimal)(Original_SpecificEnergyByVolume.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private InsulatingLiquidTypesTableAdapter _insulatingLiquidTypesTableAdapter;
        
        private CondenserTypesTableAdapter _condenserTypesTableAdapter;
        
        private CondensersTableAdapter _condensersTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public InsulatingLiquidTypesTableAdapter InsulatingLiquidTypesTableAdapter {
            get {
                return this._insulatingLiquidTypesTableAdapter;
            }
            set {
                this._insulatingLiquidTypesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CondenserTypesTableAdapter CondenserTypesTableAdapter {
            get {
                return this._condenserTypesTableAdapter;
            }
            set {
                this._condenserTypesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CondensersTableAdapter CondensersTableAdapter {
            get {
                return this._condensersTableAdapter;
            }
            set {
                this._condensersTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._insulatingLiquidTypesTableAdapter != null) 
                            && (this._insulatingLiquidTypesTableAdapter.Connection != null))) {
                    return this._insulatingLiquidTypesTableAdapter.Connection;
                }
                if (((this._condenserTypesTableAdapter != null) 
                            && (this._condenserTypesTableAdapter.Connection != null))) {
                    return this._condenserTypesTableAdapter.Connection;
                }
                if (((this._condensersTableAdapter != null) 
                            && (this._condensersTableAdapter.Connection != null))) {
                    return this._condensersTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._insulatingLiquidTypesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._condenserTypesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._condensersTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(DataSetMain dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._condenserTypesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CondenserTypes.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._condenserTypesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._insulatingLiquidTypesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.InsulatingLiquidTypes.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._insulatingLiquidTypesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._condensersTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Condensers.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._condensersTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(DataSetMain dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._condenserTypesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CondenserTypes.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._condenserTypesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._insulatingLiquidTypesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.InsulatingLiquidTypes.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._insulatingLiquidTypesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._condensersTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Condensers.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._condensersTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(DataSetMain dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._condensersTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Condensers.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._condensersTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._insulatingLiquidTypesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.InsulatingLiquidTypes.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._insulatingLiquidTypesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._condenserTypesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CondenserTypes.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._condenserTypesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(DataSetMain dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._insulatingLiquidTypesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._insulatingLiquidTypesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._condenserTypesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._condenserTypesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._condensersTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._condensersTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._insulatingLiquidTypesTableAdapter != null)) {
                    revertConnections.Add(this._insulatingLiquidTypesTableAdapter, this._insulatingLiquidTypesTableAdapter.Connection);
                    this._insulatingLiquidTypesTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._insulatingLiquidTypesTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._insulatingLiquidTypesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._insulatingLiquidTypesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._insulatingLiquidTypesTableAdapter.Adapter);
                    }
                }
                if ((this._condenserTypesTableAdapter != null)) {
                    revertConnections.Add(this._condenserTypesTableAdapter, this._condenserTypesTableAdapter.Connection);
                    this._condenserTypesTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._condenserTypesTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._condenserTypesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._condenserTypesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._condenserTypesTableAdapter.Adapter);
                    }
                }
                if ((this._condensersTableAdapter != null)) {
                    revertConnections.Add(this._condensersTableAdapter, this._condensersTableAdapter.Connection);
                    this._condensersTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._condensersTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._condensersTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._condensersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._condensersTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._insulatingLiquidTypesTableAdapter != null)) {
                    this._insulatingLiquidTypesTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._insulatingLiquidTypesTableAdapter]));
                    this._insulatingLiquidTypesTableAdapter.Transaction = null;
                }
                if ((this._condenserTypesTableAdapter != null)) {
                    this._condenserTypesTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._condenserTypesTableAdapter]));
                    this._condenserTypesTableAdapter.Transaction = null;
                }
                if ((this._condensersTableAdapter != null)) {
                    this._condensersTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._condensersTableAdapter]));
                    this._condensersTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591